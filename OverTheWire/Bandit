Level 0:
-----------
    I Bandit0 skal man forbinde til bandit.labs.overthewire.org med ssh på port 2220. Brugernavn er bandit0 og kodeord er ligeså bandit0. Det gøres da med
        $ ssh bandit0@bandit.labs.overthewire.org -p 2220
    herefter blive rman spurgt om kodeord og man indtaster blot "bandit0" og så er man logget ind.


Level 0 -> Level 1:
----------------------
    Kodeordet til bandit1 findes i filen "readme" i det directory man befinder sig i, når man gennemfører bandit0. Brug
        $ cat readme
    til at printe det. "cat" funktionen, der printer indholdet af en fil. Kodeordet er
        NH2SXQwcBdpmTEzi3bvBHMM9H66vVXjL
    
    Det gælder generelt for bandit level x, at man logger ind på
        $ banditx$bandit.labs.overthewire.org
    på port 2220 med et kodeord, man har opnået i det tidligere level.


Level 1 -> Level 2:
----------------------
    Her er kodeordet til næste level i en fil kaldet "-".
        $ cat -
    virker ikke umiddelbart. Det er nok fordi, filnavnet er en special character. Ditto med
        $ cat "-"
    Dog virker
        $ cat ./-
    da hele fildestinationen her er givet til cat. Denne kommando giver kodeordet
        rRGizSaX8Mk1RTb1CNQoXTcYZWU6lgzi


Level 2 -> Level 3:
----------------------
    Kodeordet til level 3 er i en fil kaldet "spaces in this filename". Linux-terminalen kan normalt ikke håndtere mellemrum, da den tror der er tale om en ny kommando, hver gang noget kommer efter et mellemrum. Løsningen er at sætte filnavnet i citationstegn:
        $ cat "spaces in this filename"
    giver da kodeordet
        aBZ0W5EmUfAf7kHTQeOwd8bauFJ2lAiG


Level 3 -> Level 4:
----------------------
    Kodeordet er denne gang gemt i en skjult fil i mappen "inhere".
        $ ls
    bruges jo normalt til at liste filer i en mappe. Efter at have gået ind i mappen viser denne kommando dog intet, hvilket er forventeligt, da der er tale om en skjult fil (en fil, der starter med et punktum). Man skal i stedet bruge
        $ ls -a
    for at vise alle filer i en mappe. Filen heddder ".hidden" og
        $ cat .hidden
    giver da kodeordet
        2EW7BBsr6aMMoJ2HjW067dm8EgX26xNe


Level 4 -> Level 5:
----------------------
    Filen med kodeordet er igen inde i en mappe, de rhedder "inhere". Angiveligt er der kun én menneskeligt læselig fil herinde, som indeholder kodeordet. De andre filer gør åbenbart noget underligt ved layout i terminalen. Det kan omgøres med
        $ reset
    men er ikke strengt nødvendigt. Kodeordet er i øvrigt i filen "-file07", så
        $ cat ./-file07
    giver kodeordet
        lrIWWI6bB37kxfiCQZqUdOIYfr6eEeqR


Level 5 -> Level 6:
----------------------
    Her er filen opbevaret et sted i mappen "inhere". Det oplyses, at filen er læselig for et menneske, har størrelse 1033 bytes og er ikke en kørbar fil. I mappen er en masse undermapper ved navn "maybehere00"..."maybehere19".
        $ find . -type f ! -executable -size 1033c
    finder den ønskede fil. "find" er funktionen, der bruges. "." angiver, at søgningen starter i den nuværende mappe. "-type" give med en parameter (i det her tilfælde "f") og angiver typen på filen (i det her tilfælde en almindelig fil). "!" bruges til at negere det efterfølgende udtry, som er "-executable", som angiver at filen, der søges efter er en kørbar fil. "! -executable" giver da til sammen, at der søges en ikke-kørbar fil. "-size" bruges til at angive størrelsen på den ønskede fil. "1033c" angiver størrelsen til at være 1033 bytes ("c" bruges her om bytes). "-size 1033c" angiver da, at den søgte fil har størrelse 1033 bytes.
    Den eneste fil, der lever op til de ønskede krav er filen
        ./maybehere07/.file2
    og
        $ cat ./maybehere07/.file2
    giver da kodeordet
        P4L4vucdmLnm8I7Vl7jG1ApGSfjYKqJU
    (bemærk dog at filen indeholder en masse white space)


Level 6 -> Level 7:
----------------------
    Den eneste info der nu gives er, at filen er opbevaret et eller andet sted på ssh-serveren, er ejet af brugeren bandit7, er ejet af gruppen bandit6 og har størrelse 33 bytes. Først skiftes til rodmappen på serveren med
        $ cd /
        og kommandoen
        $ find . -size 33c -user bandit7 -group bandit6
    giver da en uoverskuelig liste af filer, hvoraf de fleste giver har "Permission denied" på sig i sit resultat. "-user" og "-group" bruges til at finde en fil der henholdsvist er ejet af en specifik bruger og af en specifik gruppe. Den ønskede fil findes dog til at være
        ./var/lib/dpkg/info/bandit7.password
    med
        find . -size 33c -user bandit7 -group bandit6 2>/dev/null
    hvor "2>dev/null" angiver at alle resultater, der returneres med standard fejlkode (fejlkode 2) smides over i dev/null (altså, at disse resultater ikke vises).
        $ cat ./var/lib/dpkg/info/bandit7.password
    giver da kodeordet
        z7WtoNQU2XfjmMtWA8u5rN4vzqu4v99S


Level 7 -> Level 8:
----------------------
    Denne gang er kodeordet opbevaret i filen "data.txt" ved siden af ordet "millionth".
        $ cat data.txt
    giver en ualmindeligt stor liste af ord og mulige kodeord ved siden af dem. Hver indgang lader til at slutte med en newline.
        $ grep -F millionth data.txt
    giver den ønskede linie. "grep" er en kommando, der bruges til at finde en specifik linie tekst i en given fil (og printe teksten fra denne linie). "-F" angiver at det der skal mathes på er et specifikt ord - dette argument efterfølges derfor af ordet "millionth". Som argument nr. 2 gives filen hvori grep skal søge efter linien der matcher kriteriet fra det første argument. (Hvis der ikke er noget første argument, så matcher alle linier som standard.) Den returnerede tekst er da
        millionth	TESKZC0XvTetK0S9xNwm25STk5iWrBvP
    hvoraf kodeordet
        TESKZC0XvTetK0S9xNwm25STk5iWrBvP
    kan aflæses.


Levle 8 -> Level 9:
----------------------
    I dette level er kodeordet i filen "data.txt", som den eneste linie, der ikke er gengivet. Filen består af en masse linier med mulige kodeord. Ret så uoverskueligt.
        $ uniq -u data.txt
    Giver blot det samme output. "uniq" er en kommando til at filtrere tilstødende matchende linier fra input. "-u" bruges til at finde unikke linier. Problemet her er, at linierne med gentagelserne ikke er tilstødende. Derfor bruges
        $ cat data.txt | sort | uniq -u
    til finde linien
        EN632PlfYiZbn3PhVK3XOGSlNInNE00t
    som må være det ønskede kodeord. Først tages al teksten ud af filen, med "cat" og "|" specificerer, at outputtet ledes over i en anden funktion. Denne funktion er "sort", som sorterer linierne af tekst. Dette ledes derefter over i "uniq -u", som på grund af, at alle ens linier nu er tilstødende, giver den eneste linie, der ikke har en tilstødende linie, der er magen til sig selv.


Level 9 -> Level 10:
-----------------------
    Kodeordet til level 10 er opbevaret i en fil kaldet "data.txt". Linien med kodeordet er én af de få menneskeligt læselige linier og er forudgået af flere lighedstegn. Filen er meget lang og indeholder flere linier end det er praktisk at gennemsøge manuelt. Hvis man prøver bare at køre
        $ grep === data.txt
    (som ellers burde virke), så får man
        grep: data.txt: binary file matches
    så det er altså ikke bare en række tegn i filen, men en binær fil. Med
        $ strings data.txt
    printes dog alle ASCII-strenge i filen.
        $ string data.txt | grep ===
    får man dog
        x]T========== theG)"
        ========== passwordk^
        ========== is
        ========== G7w8LIi6J3kTb8A7j9LgrywtEUlyyp6s
    hvilket giver kodeordet
        G7w8LIi6J3kTb8A7j9LgrywtEUlyyp6s


Level 10 -> Level 11
-----------------------
    Denne gang er kodeordet i filen "data.txt", som er indkodet i base 64. Heldigvis har linux en indbygget kommando til at håndtere den slags.
        $ base64 -d data.txt
    er kommandoen, der skal bruges. "base64" er kommandoen, flaget "-d" angiver at der ønskes afkodning og det sidste argument er filen, der skal afkodes. Udførslen af ovenstående giver
        The password is 6zPeziLdR2RKNdNYFNb6nVCKzphlXHBM
    og det er derfor ikke helt svært at finde ud af, at det ønskede kodeord er
        6zPeziLdR2RKNdNYFNb6nVCKzphlXHBM


Level 11 -> Level 12
-----------------------
    I dette level er kodeordet i filen "data.txt", men alle bogstaver er roteret med 13. Det vil altså sige, kryptosystemet Rot13 er anvendt på alle bogstaverne. Rot13 er bare et specialtilfælde af cæsarcifferet, hvor nøglen er 13.
        $ cat data.txt
    giver
        Gur cnffjbeq vf WIAOOSFzMjXXBC0KoSKBbJ8puQm5lIEi
    Afkodningen kan gøres i hånden, men jeg brugte en online implementation. Den gav
        The password is JVNBBFSmZwKKOP0XbFXOoW8chDz5yVRv
    hvoraf kodeordet aflæses til at være
        JVNBBFSmZwKKOP0XbFXOoW8chDz5yVRv


Level 12 -> Level 13
-----------------------
    Kodeordet er denne gang igen i en fil kaldet "data.txt". Denne fil er et såkaldt hexdump. Det foreslåes, at lave en mappe inde i /tmp-mappen, kopiere filen derind og navngive den om.

